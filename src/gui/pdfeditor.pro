######################################################################
# Automatically generated by qmake (2.01a) Fri Aug 5 07:22:24 2011
######################################################################

TEMPLATE = app
TARGET = pdfeditor
# We want to have debug functionality and warnings under controll
QMAKE_CFLAGS -= -g -Wall
QMAKE_CXXFLAGS -= -g -Wall
QMAKE_CFLAGS_RELEASE -= -g -Wall
QMAKE_CXXFLAGS_RELEASE -= -g -Wall

# include basic definitions from configuration process
include(../../Makefile.flags)

# check debug/release
contains( E_RELEASE, no ) {
 # debug mode
 # turns off optimalizations
 CONFIG -= release
 CONFIG -= warn_off
 CONFIG *= debug
 CONFIG *= warn_on
}
contains( E_RELEASE, yes ) {
 # release mode
 # turns on optimalizations
 CONFIG -= debug
 CONFIG -= warn_on
 CONFIG *= warn_off
 CONFIG *= release
}

# cygwin hack 
# FIXME where do we define this? Is it qmake feature?
#contains( QMAKE_CYGWIN_EXE, 1 ) {
#TARGET   = pdfedit.exe
#}


# Needed for Qt4. Qt3's Qmake does not know this variable, so it is ignored
# Note Qt4 is not (yet) supported
QT += qt3support

# QT_CLEAN_NAMESPACE must be specified, otherwise namespace debug will clash with debug() in QT
QMAKE_CXXFLAGS += -DQT_CLEAN_NAMESPACE -fexceptions

# Check installation prefix
isEmpty( PREFIX ) {
 message("No prefix defined - check Makefile.flags in top-level directory")
 message("Run ./configure there if the file does not exist")
 error("PREFIX not defined");
}

# Binary file installed in binary path (typically /usr/bin)
target.path    = $$BIN_PATH

TARGETDEPS	+= $(MANDATORY_LIB_FILES)

# Data files installed in application data path (typically /usr/share/pdfedit)
# Basic data files
data.path       = $$DATA_PATH

# Force configure compiler and all other programs used for installation
QMAKE_CC = $(CONFIG_CC)
QMAKE_CXX = $(CONFIG_CXX)
QMAKE_LINK = $(CONFIG_LINK)
QMAKE_LINK_SHLIB = $(CONFIG_LINK)
QMAKE_RANLIB = $(CONFIG_RANLIB)
QMAKE_AR = $(CONFIG_AR)
QMAKE_COPY = $(CONFIG_COPY)
QMAKE_COPY_FILE = $(CONFIG_COPY_FILE)
QMAKE_COPY_DIR = $(CONFIG_COPY_DIR)
QMAKE_DEL_FILE = $(CONFIG_DEL_FILE)
# qmake doesn't like QMAKE_SYMLINK and ignores it
QMAKE_SYMLINK = $(CONFIG_SYMLINK)
QMAKE_DEL_DIR = $(CONFIG_DEL_DIR)
QMAKE_MOVE = $(CONFIG_MOVE)
QMAKE_CHK_DIR_EXISTS = $(CONFIG_CHK_DIR_EXISTS)
QMAKE_MKDIR = $(CONFIG_MKDIR)

# include headers from kernel and used by kernel
INCPATH += $(MANDATORY_PATHS)
# adds kernel libraries
LIBS += $(MANDATORY_LIBS)

# Flags from configuration
QMAKE_CFLAGS += $(CONFIG_CFLAGS)
QMAKE_CXXFLAGS += $(CONFIG_CXXFLAGS) $(EXTRA_GUI_CXXFLAGS)

# directories to creating files
unix {
  UI_DIR = .ui
  MOC_DIR = .moc
  OBJECTS_DIR = .obj
}
# Input
HEADERS += bookmark.h \
           colorpicker.h \
           comments.h \
           debug.h \
           fontWidget.h \
           globalfunctions.h \
           insertImage.h \
           insertpagerange.h \
           MyWidget.h \
           openpdf.h \
           operatorData.h \
           page.h \
           pdfgui.h \
           rotatepagerange.h \
           Search.h \
           TabPage.h \
           tree.h \
           typedefs.h

FORMS += aboutDialog.ui \
         annotationFrame.ui \
         colorPicker.ui \
         comments.ui \
         convertPageRange.ui \
         debugFrame.ui \
         exportImage.ui \
         imageFrame.ui \
         insertImage.ui \
         insertpagerange.ui \
         OpenPdf.ui \
         page.ui \
         pdfgui.ui \
         properties.ui \
         rotatepagerange.ui \
         search.ui \
         Settings.ui \
         Tab.ui \
         textFrame.ui \
         textWindow.ui
SOURCES += bookmark.cpp \
           colorPicker.cpp \
           comments.cpp \
           fontWidget.cpp \
           globalfunctions.cpp \
           insertImage.cpp \
           insertpagerange.cpp \
           main.cpp \
           MyWidget.cpp \
           openpdf.cpp \
           operatorData.cpp \
           page.cpp \
           pdfgui.cpp \
           rotatepagerange.cpp \
           Search.cpp \
           TabPage.cpp \
           tree.cpp 
RESOURCES += pdf.qrc
